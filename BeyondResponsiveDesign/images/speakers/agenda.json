[  
   {  
      "Id":"10d3e6b2ef22acbc38bf5c90769b1e88",
      "Title":"Keynote: Polyglot Data",
      "TimeSlotId":"09:00 - 10:00",
      "TrackId":"Room 07",
      "Abstract":"Never heard of it? I am not very surprised. We have many problems that we are forced to solve. Many concepts work in our current models, many do not. Picking the wrong model can lead to massive amounts of accidental complexity. This talk will look at how to reach the point where you stop thinking about how to force your problem into your predefined thinking and how to reach a place where you focus on how to choose the right model for the problem!",
      "Speaker":"Greg Young",
      "SpeakerId":"greg.young.7106"
   },
   {  
      "Id":"0cac44e8016e26cf5a1c8aed59c2778b",
      "Title":"Future of Development and the Cloud",
      "TimeSlotId":"10:30 - 11:20",
      "TrackId":"Room 07",
      "Abstract":"A large change is afoot in software development. Baby steps have led the way, as evidenced by continuous delivery efforts, virtual machines, and service-oriented architecture. Leading a cloud R&amp;D team makes it clear that the next steps in cloud development are through virtualized applications and application containers (not virtual machines). This movement has already started, as can be seen at Docker, Inc.; Twitter; foursquare; AirBnb; and Baidu, to name just a few. This session covers the future of cloud development with Docker and Mesos, how it will create a commoditized cloud solution, and how it will change software development moving forward.",
      "Speaker":"Ken Sipe",
      "SpeakerId":"kensipe1"
   },
   {  
      "Id":"15f7e67e024f58a83fb983917cbf2b82",
      "Title":"Modern Enterprise Java Architectures with Spring 4.1",
      "TimeSlotId":"11:30 - 12:20",
      "TrackId":"Room 07",
      "Abstract":"This session presents selected Spring Framework 4 feature highlights, with a focus on the recently released Spring Framework 4.1. Topics include Spring 4's comprehensive Java 8 story, its WebSocket support, and the latest caching and messaging features in Spring 4.1 - illustrated with component code examples and noteworthy design considerations.",
      "Speaker":"Juergen Hoeller",
      "SpeakerId":"juergenhoeller"
   },
   {  
      "Id":"a92ff3e51a91363967fa55368dc8c707",
      "Title":"Java EE 8, a snapshot overview",
      "TimeSlotId":"13:20 - 14:10",
      "TrackId":"Room 07",
      "Abstract":"Java EE 7 was mid 2013 and from J2EE to Java EE 7, much has changed but we are not done yet! Through the years, Java EE has always reinventing itself. Java EE 8 will be no exception to this rule! In this session, we will look at the Java EE 8 plans. We will review the various new JSRs that will be part of Java EE 8 (e.g. MVC JSR, JSON-B JSR, Security JSR, Configuration JSR...). We will obviously also looks how the existing technologies will evolves for Java EE 8 (eg. Servlet 4 with the HTTP 2 support, JMS's plan to replace Message Driven Beans, CDI/EJB alignment, etc). We will conclude by looking at how the community can get involved in those works.",
      "Speaker":"David Delabassee",
      "SpeakerId":"david.delabassee"
   },
   {  
      "Id":"28b3a7c2d8b8152d0b0eb2f0382c30de",
      "Title":"Taking Lambdas and Streams to the Next Level With JDK8",
      "TimeSlotId":"14:20 - 15:10",
      "TrackId":"Room 07",
      "Abstract":"JDK8   introduced Lambda expressions to the language and the Streams API which uses   Lambdas to simplify bulk operations.  This talk will start with a brief introduction to the concepts of Lambdas   and Streams and then delve into how to really get the most from them.&nbsp; We&rsquo;ll cover things like correct handling of   exceptions, issues like refection and serialisation as well as discussing   some complex use cases.&nbsp; We&rsquo;ll close   with a look at some of the ways to debug the use of Lambdas and Streams.",
      "Speaker":"Simon Ritter",
      "SpeakerId":"simonritter"
   },
   {  
      "Id":"2fbeace2da507d796527b6861a80f39a",
      "Title":"Coding Culture",
      "TimeSlotId":"16:40 - 17:30",
      "TrackId":"Room 07",
      "Abstract":"One day we woke up and realized that our days are filled with all kind of stuff unrelated to code or product, that our goals are driven by product owners, and that our code design is dictated by architects trying to tell us how we should solve problems. A strong coding culture gives the power back to the developer to concentrate on one thing: Create awesome stuff!Imagine a culture where the input of the whole organization turns an individual idea into a user story in just a couple of hours; where everybody's goal is to make the customer awesome, and where you work on stuff you love instead stuff you loathe. A great coding culture concentrates on making developers productive and happy by removing unnecessary overhead, bringing autonomous teams together, helping the individual programmer to innovate, and raising the awareness among the developers to create better code. I will talk about how to establish and foster a strong engineering-focused culture that scales from a small team to a huge organization with hundreds of developers. I'll give lots of examples from our experience at Atlassian to show that once you're working in a great coding culture, you won't want to work anywhere else.",
      "Speaker":"Sven Peters",
      "SpeakerId":"svenpeters"
   },
   {  
      "Id":"e3de3e721d35723967f12c27ec48d6c5",
      "Title":"Evaluating persistent, replicated message queues",
      "TimeSlotId":"10:30 - 11:20",
      "TrackId":"Room 08",
      "Abstract":"Messaging   systems have always been an important architectural component of many   systems. With the rising popularity of microservices and reactive   programming, the MQ workload increases significantly, setting new   requirements as to their performance and resilience.  We will take a look at a specific subset of messaging systems: ones which   offer both persistence and replication. In other words, ones that will make   sure that messages are not lost, even in case of hardware failure.  The evaluation will include RabbitMQ, HornetQ and Kafka, as well as a   MongoDB-based queue and the as-a-service offering from Amazon, SQS. Apart   from a look at their messaging protocols and semantics, we will see what is   their performance, scaling characteristics and how they compare to each   other.  With such information, it should be much easier to make an informed choice   when looking for a messaging system for your next project!",
      "Speaker":"Adam Warski",
      "SpeakerId":"adam.warski.5"
   },
   {  
      "Id":"beb003d6e1f5893520ac620b55177034",
      "Title":"Java on iOS? Yes you can!",
      "TimeSlotId":"11:30 - 12:20",
      "TrackId":"Room 08",
      "Abstract":"",
      "Speaker":"Mario Zechner",
      "SpeakerId":"mariozechner"
   },
   {  
      "Id":"fe79f5b19a3d604750c973fe36b7463b",
      "Title":"Get Back in Control of Your SQL with jOOQ",
      "TimeSlotId":"14:20 - 15:10",
      "TrackId":"Room 08",
      "Abstract":"SQL is a   powerful and highly expressive language for queries against relational   databases. SQL is established, standardised and hardly challenged by   alternative querying languages. Nonetheless, in the Java ecosystem, there had   been few relevant steps forward since JDBC to better integrate SQL into Java.   All attention was given to object-relational mapping and language   abstractions on a higher level, such as OQL, HQL, JPQL, CriteriaQuery. In the   mean time, these abstractions have become almost as complex as SQL itself,   regardless of the headaches they're giving to DBAs who can no longer patch   the generated SQL.  jOOQ is a dual-licensed Open Source product filling this gap. It implements   SQL itself as an internal domain-specific language in Java, allowing for the   typesafe construction and execution of SQL statements of arbitrary   complexity. This includes nested selects, derived tables, joins, semi-joins,   anti-joins, self-joins, aliasing, as well as many vendor-specific extensions   such as stored procedures, arrays, user-defined types, recursive SQL,   grouping sets, pivot tables, window functions and many other OLAP features.   jOOQ also includes a source code generator allowing you to compile queries in   modern IDEs such as Eclipse very efficiently.  jOOQ is a good choice in a Java application where SQL and the specific   relational database are important. It is an alternative when JPA / Hibernate   abstract too much, JDBC too little. It shows, how a modern domain-specific   language can greatly increase developer productivity, internalising SQL into   Java.",
      "Speaker":"Lukas Eder",
      "SpeakerId":"lukaseder1"
   },
   {  
      "Id":"91632ecc64534a44424e751572445adc",
      "Title":"What's new in Spring Data?",
      "TimeSlotId":"15:40 - 16:30",
      "TrackId":"Room 08",
      "Abstract":"This   talk will give a broad overview of the new features introduced in the latest   Spring Data release trains. We will cover recent additions and improvements   in Spring Data Commons - the module that's shared amongst the store specific   ones. We'll then delve into the latest and greatest features of individual   store modules, like JPA, MongoDB, Neo4j, Solr and the community ones as well.",
      "Speaker":"Oliver Gierke",
      "SpeakerId":"ogierke"
   },
   {  
      "Id":"8c946a70c6869c93fc285a4ee0aa3071",
      "Title":"Operational Database with Elephant Memory",
      "TimeSlotId":"10:30 - 11:20",
      "TrackId":"Room 09",
      "Abstract":"Nowadays   there's a lot of fuzz around big data projects and large deployments of both   analytical and operational datasets and applications. In such diverse,   variable and voluminous environment one might be lost on the amount of   options and choices for tackling a particular use cases. More often than not,   the solution passes by using the right set of tools and not so much the one   size fits all traditional approach.   This talk is about how MongoDB and Hadoop can be put to work together on very   challenging and demanding use cases like lambda architectures, operational +   analytical workloads or even realtime immediate access + long term and raw   archiving deployments.  The talk consists on 3 main topics: - Differences and complementary usage of MongoDB and Hadoop - Real production use cases  - Small demo to demonstrate how we can easily integrate both technologies   under the same deployment The attendees will be taking home a set of real life experiences, a small   demo that they can practices themselves to better understand where the 2   technologies can be of their interest and some ideas so they can explore   extended usage of MongoDB with the full Hadoop stack (Spark, YARN, HDFS, Hive   and PIG)  This talk is primarily oriented for development and ops teams with a small   stint on use cases that might be interest for the most bizdev and architects.   If you work on large datasets and operational databases, this talk is for   you.",
      "Speaker":"Norberto Leite",
      "SpeakerId":"norberto1"
   },
   {  
      "Id":"2f657056e78a8be2e625f8b8cf1ab9a3",
      "Title":"Monadic Java",
      "TimeSlotId":"11:30 - 12:20",
      "TrackId":"Room 09",
      "Abstract":"Category   Theory is to functional programming what GoF design patterns are to object   oriented programming. Since Java introduced lambda expressions, time is   arrived also for Java developers to learn something more about functional   programming patterns. Monads are probably the most expressive (and very   likely the most misunderstood) of these patterns. So the purpose of this talk   is to explain monads, clarify with very practical examples how and when they   should be used, underline their advantages and show how they can be   implemented in Java 8.",
      "Speaker":"Mario Fusco",
      "SpeakerId":"mario.fusco"
   },
   {  
      "Id":"3d3b60e95780c1e6670c2155c9326935",
      "Title":"Polymer like a boss",
      "TimeSlotId":"13:20 - 14:10",
      "TrackId":"Room 09",
      "Abstract":"Webcomponents   look super useful and easy at first, but soon one realizes it's sometimes   hard to manage all the dependencies without losing control of what's going on   behind the curtains. Currently, developers try to keep dependencies and   imports in production to a minimum because each server request is expensive.   Using webcomponents without caution can easily destroy all efforts.  At first, I want to demonstrate how a powerful and highly interactive   component is built using Polymer and describe the key benefits. From there on   I'll proceed in how to set up a build pipeline using Gulp, throwing tools   like SASS or CoffeScript into the mix. By showing a thought-through example   of how to structure one's component framework, I'll show how to get   everything built production-ready. There are a lot of interesting questions   awaiting and I aim to answer them.",
      "Speaker":"Roman Kuba",
      "SpeakerId":"roman8"
   },
   {  
      "Id":"68c780857dfcf25fcaf0631dc9869b0e",
      "Title":"Beyond responsive design - UI for the modern web application",
      "TimeSlotId":"14:20 - 15:10",
      "TrackId":"Room 09",
      "Abstract":"Applications   written for the modern web are being consumed not just on desktop browsers,   but also on a myriad of other devices... even watches and glasses. If you   design your application with a pc screen in mind, at worst you're either   cutting your userbase in half or setting yourself up for an expensive   redesign.  In this talk I'll introduce you to some modern web design constructs, and   the technologies that bring them to life. Learn how to create apps that work   just as well on phone, mobile and desktop with no extra effort, and without   restrictive layout frameworks. Web has finally caught up with native apps...   the future is now!",
      "Speaker":"Pete Smith",
      "SpeakerId":"roysvork"
   },
   {  
      "Id":"920a719b2b01f103ce4523b2adf82fd8",
      "Title":"'Quantum' Performance Effects",
      "TimeSlotId":"15:40 - 16:30",
      "TrackId":"Room 09",
      "Abstract":"Nowadays,   CPU microarchitecture is concealed from developers by compilers, VMs, etc.    Do Java developers need to know microarchitecture details of modern   processors?  Or, does it like to learn quantum mechanics for cooking?  Are Java developers safe from leaking low-level microarchitecture details   into high level application performance behaviour?  We will try to answer these questions by analyzing several Java examples.",
      "Speaker":"Sergey Kuksenko",
      "SpeakerId":"sergey.kuksenko"
   },
   {  
      "Id":"3d7815fd5042c366d77d7db611e8c441",
      "Title":"Candies for everybody: hacking from 9 to 5",
      "TimeSlotId":"16:40 - 17:30",
      "TrackId":"Room 09",
      "Abstract":"Over the   latest years, the line between offline and online world becoming thinner,   practically disappearing. Today, thanks to the new technologies, is possible   take the control of all the things of your offline world using the power of   the online world.  On this talk we study the different real examples of hardware devices and   the interconnection with different SDKs for having successful tools.   Moreover, we&rsquo;ll do a tour seeing the crazy experiments made by the   Braintree_Dev team, from a lighting t-shirt to a remote coffe machine or the   dance monkey, showing another way to learn new languages and testing new   devices.  Also, we&rsquo;ll se a real example of integration, having on the stage a real   prototype of sweet dispenser machine with Spark that works dispensing sweets   after anybody pays using the mobile device (as real demo on the stage). Say hello to the fusion between APIs and &amp; IOT!",
      "Speaker":"Alberto Lopez",
      "SpeakerId":"alberto.lopez"
   },
   {  
      "Id":"dff42c3fbb97c9e4e72c3a863fb76d85",
      "Title":"Making Java more dynamic",
      "TimeSlotId":"10:30 - 11:20",
      "TrackId":"Room 10",
      "Abstract":"While   Java&rsquo;s strict type system is a great help for avoiding programming errors, it   also takes away some of the flexibility that developers appreciate when using   dynamic languages. By using runtime code generation, it is possible to bring   some of this flexibility back to the Java virtual machine. For this reason,   runtime code generation is widely used by many state-of-the-art Java   frameworks for implementing POJO-centric APIs but it also opens the door to   assembling more modular applications. This presentation offers an   introduction to the complex of runtime code generation and its use on the   Java platform. Furthermore, it discusses the up- and downsides of several   code generation libraries such as ASM, Javassist, cglib and Byte Buddy.",
      "Speaker":"Rafael Winterhalter",
      "SpeakerId":"rafaelwinterhalter"
   },
   {  
      "Id":"3592687c1cdbda3cc027c786966776a6",
      "Title":"The Walking Dead - A Survival Guide to Resilient Applications",
      "TimeSlotId":"11:30 - 12:20",
      "TrackId":"Room 10",
      "Abstract":"\"The   more you sweat in peace, the less you bleed in war\" - the US marines   certainly know how to deal with the unexpected. Building resilient   distributed applications is not an easy task and you better prepare for   failure during development. In this talk you will learn how to build   event-driven applications that are resilient from the bottom up, allowing you   to deal with remote services that are failing, slow or misbehaving. Even if   you are just consuming data from a database over the network, this talk is   for you.  The talk introduces different stability patterns and showcases them with   real code, utilizing the fantastic RxJava and Hystrix libraries. Finally, you   will see a resilient application in action, performing thousands of queries   against a Couchbase Server 3.0 cluster while withstanding node failures and   latency spikes.",
      "Speaker":"Michael Nitschinger",
      "SpeakerId":"michaelnitschinger"
   },
   {  
      "Id":"daf431f4c2c707af4898131f40810036",
      "Title":"The 5 people in your organization that grow legacy code",
      "TimeSlotId":"13:20 - 14:10",
      "TrackId":"Room 10",
      "Abstract":"Have you   ever looked at a random piece of code and wanted to rewrite it so badly? It&rsquo;s   natural to have legacy code in your application at some point. It&rsquo;s something   that you need to accept and learn to live with. So is this a lost cause?   Should we just throw in the towel and give up? Hell no! Over the years, I   learned to identify 5 main creators/enablers of legacy code on the   engineering side, which I&rsquo;m sharing here with you using real development   stories (with a little humour in the mix). Learn to keep them in line and   your code will live longer!",
      "Speaker":"Roberto Cortez",
      "SpeakerId":"radcortez"
   },
   {  
      "Id":"119ad46a97a5d202873f9332fa5ce653",
      "Title":"The Adventurous Developer's guide to JVM Languages",
      "TimeSlotId":"14:20 - 15:10",
      "TrackId":"Room 10",
      "Abstract":"Today there are over 50 actively worked JVM languages in existence today. Some have been ported to the JVM while others have been written specifically for the JVM. &nbsp;This hands on session with take an introductory (but non hello, world) look at a number of JVM languages including, Java 8, Scala, Groovy, Kotlin, Ceylon, Xtend and Clojure as well as the tooling support, discussing how and why they came about along with the evolution of the languages and distinguish the innovative languages versus those which consolidate existing features from other languages. We'll cover our initial experiences including what rocked and sucked learning each one with example code snippets of a sample HTTP Server from each language.You don't need any prior knowledge in these languages to attend the session. You will learn about why these other languages have come about, whether they are for you and hear some real life experiences of trying these languages for the first time.",
      "Speaker":"Simon Maple",
      "SpeakerId":"simonmaple"
   },
   {  
      "Id":"e8d16dd55c9f6a8ea4194520a8e498d3",
      "Title":"Apache Spark 101",
      "TimeSlotId":"15:40 - 16:30",
      "TrackId":"Room 10",
      "Abstract":"\"Apache   Spark\" is a fast and general engine for large-scale data   processing.\"  Above statement is taken from Apache Spark welcome page. It's one of those   definitions that, while describing the product in one sentence and being 100   % true, tell still litle to the wondering noob.  Why take interest in Apache Spark? Apache Spark promise being up to 100x   faster than Hadoop MapReduce in certain scenarios. It provide comprehensible   programming model (familiar to everyone who is used to functional   programming) and vast ecosystem of tools.  In my talk I will try to reveal secrets of Apache Spark for the very   beginners. We will do first quick introduction to the set of problems   commonly known as BigData: what they try to solve, what are their obstacles   and challenges and how those can be addressed. We will quickly take a pick on   MapReduce: theory and implementation. We will then move to Apache Spark. We will see what was the main factor   that drove its creators to introduce yet another large-scala processing   engine. We will see how it works, what are its main advantages.   Presentation will be mix of slides and code examples.",
      "Speaker":"Pawel Szulc",
      "SpeakerId":"paul.szulc"
   }
]